{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","path":"js/jquery.autocomplete.min.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/5945805.jpg","path":"img/5945805.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/3-hexo/.gitignore","hash":"560a43fddfe4559ed1a17e7362874454519f189b","modified":1568291931143},{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1568291931142},{"_id":"themes/3-hexo/README.md","hash":"08c51fcae61d2e7e2af089712ce147324e4b6873","modified":1568291931143},{"_id":"themes/3-hexo/_config.yml","hash":"6a11e7a40023d6b8e3cccdd8e5cbefc2697bac81","modified":1568340217684},{"_id":"themes/3-hexo/layout/index.ejs","hash":"a5c464897e7dc9d45d03d8b61e742b1ac4173a95","modified":1568291931161},{"_id":"themes/3-hexo/layout/indexs.md","hash":"a105822fb8e6c53cf17a9cc1a05d33ab2950c304","modified":1568294467455},{"_id":"source/_posts/javabase/static.md","hash":"389662e21c78ed4fafe0a6c80ff52b2c8c407f45","modified":1568338853672},{"_id":"themes/3-hexo/layout/post.ejs","hash":"aeda285031ba8d4e94225e82b364bcf5f79fce1d","modified":1568291931163},{"_id":"source/_posts/javabase/异常.md","hash":"24c591f6d991617911ab95df87d2a3056d037853","modified":1570797255173},{"_id":"source/_posts/multiThread/threadLifeCycle.md","hash":"09037ceac0f7a472a41d4fa23a4fe6f8e8343221","modified":1568298130370},{"_id":"source/_posts/mybatis/mybatis使用.md","hash":"662f79148b29038c86cc369688382dae738d0012","modified":1569415421673},{"_id":"source/_posts/mybatis/mybatis核心流程.md","hash":"193f7104e2acdcd8b02c19f78cdc49cebc386ee0","modified":1568634452930},{"_id":"source/_posts/mybatis/binding模块.md","hash":"da92ebc990da925cd5c2bec47cb4a820db34546a","modified":1568815137703},{"_id":"source/_posts/mysql/index.md","hash":"6677d3fb3d206d7f1fc0379281f95c0d2241df9f","modified":1570797295043},{"_id":"source/_posts/redis/数据类型.md","hash":"b1c56b11dfc2fe099745c941a08bfbdf23b49de8","modified":1568338877906},{"_id":"themes/3-hexo/.git/config","hash":"e0bfd9b35852beab6bb3aa547e10d0805cbdf751","modified":1568291931125},{"_id":"themes/3-hexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1568291858624},{"_id":"source/_posts/mybatis/mybatis中的设计模式.md","hash":"0bbed3d26ffc8df63e964abbc02cd2a738a1717b","modified":1568342439588},{"_id":"source/_posts/multiThread/阻塞队列.md","hash":"3a2ce259752b62ede068222c5ec54dcd53004d5b","modified":1568813725121},{"_id":"themes/3-hexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1568291931107},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1568291931165},{"_id":"themes/3-hexo/.git/index","hash":"7703fa61ac7205a967c15fc17e9753a98790348d","modified":1568292604499},{"_id":"themes/3-hexo/.git/packed-refs","hash":"831568bf16f063f9646e73003eae816edf7b173d","modified":1568291931093},{"_id":"source/_posts/spring/Spring组件.md","hash":"62f256c5c5f6e9b015079e26689ac6783cba6da6","modified":1568338649190},{"_id":"source/_posts/spring/spring中的设计模式.md","hash":"55f8a13cba2c92e00899536b5e4f4f0c4a3dad3a","modified":1568504003264},{"_id":"source/_posts/spring/transaction.md","hash":"1d94c0fc28defc723263149fd557b897c8f47292","modified":1568338671622},{"_id":"source/_posts/spring/AOP底层源码.md","hash":"75fb4b351f9aecbfdd8458ff37e8ad8471b75608","modified":1568504020162},{"_id":"source/_posts/设计模式/策略模式.md","hash":"d19123875e43dd167a90706f6c30c5dcc4a77736","modified":1568817271249},{"_id":"source/_posts/spring/声明式事务底层源码.md","hash":"b16c248e6abf5c28b22111c113a8e4014b45c0e1","modified":1568338720088},{"_id":"source/_posts/网络/网络基础.md","hash":"e47b2dacbba40339d1bd5da8dea2cf3f80d96249","modified":1570794953448},{"_id":"source/_posts/设计模式/代理模式.md","hash":"b823f2907fbc60cfd172fd9afbbd6f1dac834359","modified":1568464609272},{"_id":"source/_posts/设计模式/建造者模式.md","hash":"d69b6d9bf01611e8f161bcf8d1bd944f018bfee6","modified":1568556495124},{"_id":"source/_posts/设计模式/模板模式.md","hash":"2b69bfff5fcb09e3ea1fe70dc014af45263fceff","modified":1568898236093},{"_id":"source/_posts/搭建博客/搭建博客.md","hash":"296b11d1eea8c16a50cb31737f597ef73e470df8","modified":1568340246237},{"_id":"source/_posts/设计模式/装饰器模式.md","hash":"82f5eb00c1090d5c3961bb8091f363520860044f","modified":1568505043990},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"3dc58e9a3fd63a3144d5fe850eb55e3dc885c9fb","modified":1568291931184},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"d10bdd736aa343f38fe15cba4c81d45d3d259de4","modified":1568291931197},{"_id":"themes/3-hexo/source/css/style.styl","hash":"322abe325d5fe9ff37347bdd19e772315a8ebfed","modified":1568291931198},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"d18f94e04ef0cf7abb432a8e707ccb3abc7fe435","modified":1568291931147},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"84cf0f001afe58574e983a1c42a3710b10427cca","modified":1568291931146},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"05d3cddf5f3a53577452db4efa811bd361f7c0c4","modified":1568291931147},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"faffe25aec33936fa2ec9d8f0e34e16ef3d90c25","modified":1568291931152},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"6eab1e5fae6bd60928325d026a1bed61c43d11a9","modified":1568291931152},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"311489fe2050ada8a0eaad3d0c57e5d5012f470e","modified":1568291931154},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"558a3d4bad578819fb07729fe1b50d9b81da8b93","modified":1568291931155},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"0e976208d79b0396eb51ca1af5016c963c6e4618","modified":1568291931155},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"915d5f10dd8f3dcd19cb75010e23689e8f385caf","modified":1568291931156},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"c14bc1393f779dff7854089621804dceea236d82","modified":1568291931158},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"87e932476754f27424f9ec397ed66a4ab8a59ad8","modified":1568291931159},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"33f7a4bfca1bb9835ec8f0d1e73188d1f56cc8b9","modified":1568291931160},{"_id":"themes/3-hexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1568291858640},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"98326675546fc6828a45e8b95250899b4ee2d821","modified":1568291931159},{"_id":"themes/3-hexo/.git/logs/HEAD","hash":"014ba2d28893bfb32a636b6142d5e1cc97e96470","modified":1568291931115},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"e2be0e37f3d48e63e65a47d819bfb800b9aa3784","modified":1568291931157},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"ef387e80043b62e1925a068267f2377cac64adc7","modified":1568291931157},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1568291931212},{"_id":"themes/3-hexo/source/js/search.js","hash":"788c610149a5f9361295f9f0207c8523f37ddb8b","modified":1568291931216},{"_id":"themes/3-hexo/source/js/script.js","hash":"14772b08b9c3d5c99a4b54748be9666deaae2778","modified":1568291931215},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","hash":"2462169ad7f4a8ae9f9f4063995cbe7fed45cd77","modified":1568291931213},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1568291931203},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1568291931202},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1568291931201},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1568291931204},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"8c2a4f10a4da3d9615a3a81542494c6d21479b3d","modified":1568291931214},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1568291931199},{"_id":"themes/3-hexo/source/img/5945805.jpg","hash":"376e28d8461a6087c32927cdc937a98bec544604","modified":1568297138980},{"_id":"themes/3-hexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1568291858626},{"_id":"themes/3-hexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1568291858629},{"_id":"themes/3-hexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1568291858630},{"_id":"themes/3-hexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1568291858627},{"_id":"themes/3-hexo/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1568291858632},{"_id":"themes/3-hexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1568291858633},{"_id":"themes/3-hexo/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1568291858628},{"_id":"themes/3-hexo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1568291858634},{"_id":"themes/3-hexo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1568291858637},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1568291931206},{"_id":"themes/3-hexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1568291858636},{"_id":"themes/3-hexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1568291858638},{"_id":"themes/3-hexo/source/css/_partial/autocomplete.styl","hash":"1ffe51e3b77afefcd94d386a718506d5b055ad94","modified":1568291931166},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f0eac1dc1f5dbed1769d032bb5fd5f002faaee26","modified":1568291931168},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"fe00fb1269b4fe1f3d5ab917891926222ce47275","modified":1568291931167},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"02c7510a26f306e240f23ddbf772a69be2c890dd","modified":1568291931168},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"bf29eab9ea75fa191d678b6eefec440505ddf6e3","modified":1568291931171},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"2620a02169a6aeb75137fd368eac2c36423d8498","modified":1568291931173},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"c200f3fabcfe83f3e45746e186b4bb111e73ad47","modified":1568291931169},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"4102753dad0cc1ee9ed673f7253ba097a960c3b7","modified":1568291931170},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"1d01247f974b059d9ef6a2178a724b4f72acd659","modified":1568291931172},{"_id":"themes/3-hexo/layout/_partial/comments/gentie.ejs","hash":"908d9046502612d24780ca354bd9392a009b4d7b","modified":1568291931150},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"8a3a175c2da956366ce91bfc4f4012a487f4bdfc","modified":1568291931149},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"eaf2b6f297282606b630ad55fb9e38af7e2829dc","modified":1568291931151},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"32ce7b48d366b9c888ff2ceb911a3cd82f864537","modified":1568291931149},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"f7ef35459ece22e1da950b86126be1c2bfe97fcf","modified":1568291931173},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"01567e010cf4f2dd141fe2019490d3f0d5aa2529","modified":1568291931151},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"b7a74bdfe5f56d55f5485ac9026471fe701dbd82","modified":1568291931174},{"_id":"themes/3-hexo/.git/refs/heads/master","hash":"d1cb0a4250b33432dac3ef5ad50a3eb8d3b633ff","modified":1568291931114},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1568291931176},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1568291931177},{"_id":"themes/3-hexo/.git/objects/pack/pack-bfe66738f5da00bb8ee1c84af22a609224c65fa3.idx","hash":"f3f9c2545075c9ab637b42ecee66d0017e42f23b","modified":1568291930924},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1568291931178},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"7e54ae44c02faa319c4fe128e1e6bda38eae5c9d","modified":1568291931180},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1568291931182},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1568291931179},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"b6456a4eabcffd95e822d1d7adce96da524d481a","modified":1568291931182},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"69d184a682bcaeba2b180b437dc4431bc3be38aa","modified":1568291931186},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1568291931182},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1568291931187},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1568291931186},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1568291931188},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1568291931191},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1568291931190},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1568291931189},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1568291931192},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1568291931194},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1568291931188},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1568291931193},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1568291931192},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1568291931195},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1568291931196},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1568291931195},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"67984b83cd46ff4300d4fd959bf6c17dd66b4136","modified":1568291931211},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1568291931193},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1568291931176},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"536f28c4354a13582af826d9d9b2cb27cec07dc6","modified":1568291931209},{"_id":"themes/3-hexo/.git/logs/refs/heads/master","hash":"014ba2d28893bfb32a636b6142d5e1cc97e96470","modified":1568291931117},{"_id":"themes/3-hexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1568291931104},{"_id":"themes/3-hexo/.git/logs/refs/remotes/origin/HEAD","hash":"014ba2d28893bfb32a636b6142d5e1cc97e96470","modified":1568291931103},{"_id":"themes/3-hexo/.git/objects/pack/pack-bfe66738f5da00bb8ee1c84af22a609224c65fa3.pack","hash":"bb991e92785a07229b5cf1ba80b8da386587cb4f","modified":1568291931000}],"Category":[{"name":"java基础","_id":"ck24nr6ht0002novdw2wxh7zn"},{"name":"并发编程","_id":"ck24nr6iz0007novdkgpiki1k"},{"name":"mybatis","_id":"ck24nr6je000dnovdfqmd36me"},{"name":"mysql","_id":"ck24nr6kx000rnovd0bwqx4gq"},{"name":"redis","_id":"ck24nr6lj000znovdjihp2n07"},{"name":"spring","_id":"ck24nr6ms001cnovdpnweovnx"},{"name":"设计模式","_id":"ck24nr6ol001wnovdayq0ez4p"},{"name":"网络","_id":"ck24nr6p10023novdwfygo6cu"},{"name":"博客搭建","_id":"ck24nr6r0002knovdnu6pasup"}],"Data":[],"Page":[],"Post":[{"title":"static关键字","date":"2019-09-11T16:00:00.000Z","_content":"\n# static\n* 1.修饰成员变量\n* 2.修饰成员方法\n* 3.修饰代码块\n* 4.修饰内部类\n* 5.静态导入","source":"_posts/javabase/static.md","raw":"---\ntitle: static关键字\ndate: 2019-9-12\ntags: \n- java基础\ncategories:\n- java基础\n---\n\n# static\n* 1.修饰成员变量\n* 2.修饰成员方法\n* 3.修饰代码块\n* 4.修饰内部类\n* 5.静态导入","slug":"javabase/static","published":1,"updated":"2019-09-13T01:40:53.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6ha0000novdmuebsfwo","content":"<h1 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h1><ul>\n<li>1.修饰成员变量</li>\n<li>2.修饰成员方法</li>\n<li>3.修饰代码块</li>\n<li>4.修饰内部类</li>\n<li>5.静态导入</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h1><ul>\n<li>1.修饰成员变量</li>\n<li>2.修饰成员方法</li>\n<li>3.修饰代码块</li>\n<li>4.修饰内部类</li>\n<li>5.静态导入</li>\n</ul>\n"},{"title":"线程的生命周期","_content":"\n待编写","source":"_posts/multiThread/threadLifeCycle.md","raw":"---\ntitle: 线程的生命周期\ntags: \n- 线程\ncategories:\n- 并发编程\n---\n\n待编写","slug":"multiThread/threadLifeCycle","published":1,"date":"2019-09-12T13:26:46.270Z","updated":"2019-09-12T14:22:10.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6hn0001novd14xnioxk","content":"<p>待编写</p>\n","site":{"data":{}},"excerpt":"","more":"<p>待编写</p>\n"},{"title":"mybatis使用","_content":"\n","source":"_posts/mybatis/mybatis使用.md","raw":"---\ntitle: mybatis使用\ntags: \n- mybatis\ncategories:\n- mybatis\n---\n\n","slug":"mybatis/mybatis使用","published":1,"date":"2019-09-25T12:43:07.123Z","updated":"2019-09-25T12:43:41.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6ih0004novdxr3eadjh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"mybatis核心流程","_content":"\n# mybatis核心流程三大阶段\n* 初始化阶段\n> 读取XML配置文件和注解中的配置信息，创建配置对象，并完成各个模块的初始化工作\n\n* 代理阶段\n> 封装iBatis的编程模型，使用mapper接口开发的初始化工作\n\n* 数据读写阶段\n> 通过SqlSession完成SQL解析，参数的映射，SQL的执行，结果的解析过程","source":"_posts/mybatis/mybatis核心流程.md","raw":"---\ntitle: mybatis核心流程\ntags: \n- mybatis\ncategories:\n- mybatis\n---\n\n# mybatis核心流程三大阶段\n* 初始化阶段\n> 读取XML配置文件和注解中的配置信息，创建配置对象，并完成各个模块的初始化工作\n\n* 代理阶段\n> 封装iBatis的编程模型，使用mapper接口开发的初始化工作\n\n* 数据读写阶段\n> 通过SqlSession完成SQL解析，参数的映射，SQL的执行，结果的解析过程","slug":"mybatis/mybatis核心流程","published":1,"date":"2019-09-16T11:43:49.205Z","updated":"2019-09-16T11:47:32.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6iu0005novdo8sbngtk","content":"<h1 id=\"mybatis核心流程三大阶段\"><a href=\"#mybatis核心流程三大阶段\" class=\"headerlink\" title=\"mybatis核心流程三大阶段\"></a>mybatis核心流程三大阶段</h1><ul>\n<li><p>初始化阶段</p>\n<blockquote>\n<p>读取XML配置文件和注解中的配置信息，创建配置对象，并完成各个模块的初始化工作</p>\n</blockquote>\n</li>\n<li><p>代理阶段</p>\n<blockquote>\n<p>封装iBatis的编程模型，使用mapper接口开发的初始化工作</p>\n</blockquote>\n</li>\n<li><p>数据读写阶段</p>\n<blockquote>\n<p>通过SqlSession完成SQL解析，参数的映射，SQL的执行，结果的解析过程</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mybatis核心流程三大阶段\"><a href=\"#mybatis核心流程三大阶段\" class=\"headerlink\" title=\"mybatis核心流程三大阶段\"></a>mybatis核心流程三大阶段</h1><ul>\n<li><p>初始化阶段</p>\n<blockquote>\n<p>读取XML配置文件和注解中的配置信息，创建配置对象，并完成各个模块的初始化工作</p>\n</blockquote>\n</li>\n<li><p>代理阶段</p>\n<blockquote>\n<p>封装iBatis的编程模型，使用mapper接口开发的初始化工作</p>\n</blockquote>\n</li>\n<li><p>数据读写阶段</p>\n<blockquote>\n<p>通过SqlSession完成SQL解析，参数的映射，SQL的执行，结果的解析过程</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"binding模块","_content":"\n\n","source":"_posts/mybatis/binding模块.md","raw":"---\ntitle: binding模块\ntags: \n- mybatis\ncategories:\n- mybatis\n---\n\n\n","slug":"mybatis/binding模块","published":1,"date":"2019-09-18T13:57:30.431Z","updated":"2019-09-18T13:58:57.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6ix0006novdgmra1i9a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"mysql","_content":"\n","source":"_posts/mysql/index.md","raw":"---\ntitle: mysql\ntags: \n- mysql\ncategories:\n- mysql\n---\n\n","slug":"mysql/index","published":1,"date":"2019-09-12T13:26:46.278Z","updated":"2019-10-11T12:34:55.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6j3000anovdgeru9hw1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"mybatis设计模式","_content":"\n# 适配器模式\n* 角色：\n\t* Target: 目标角色，期待得到的接口\n\t* Adaptee:适配者角色，被适配的接口\n\t* Adapter:适配器角色，将原接口转换成目标接口\n* 适用场景：当调用双方都不太容易修改的时候，为了服用现有组件可以使用适配器模式；在系统中介入第三方组件的时候经常被用到\n* 代理模式和适配器模式的区别：\n* 代理模式和装饰器模式的区别：\n\n\n# 代理模式\n* 目的：\n1. 通过引入代理对象的方式来间接访问目标对象，防止直接访问目标对象给系统带来的不必要复杂性\n2.通过代理对象对原有的业务增强","source":"_posts/mybatis/mybatis中的设计模式.md","raw":"---\ntitle: mybatis设计模式\ntags: \n- mybatis\ncategories:\n- mybatis\n---\n\n# 适配器模式\n* 角色：\n\t* Target: 目标角色，期待得到的接口\n\t* Adaptee:适配者角色，被适配的接口\n\t* Adapter:适配器角色，将原接口转换成目标接口\n* 适用场景：当调用双方都不太容易修改的时候，为了服用现有组件可以使用适配器模式；在系统中介入第三方组件的时候经常被用到\n* 代理模式和适配器模式的区别：\n* 代理模式和装饰器模式的区别：\n\n\n# 代理模式\n* 目的：\n1. 通过引入代理对象的方式来间接访问目标对象，防止直接访问目标对象给系统带来的不必要复杂性\n2.通过代理对象对原有的业务增强","slug":"mybatis/mybatis中的设计模式","published":1,"date":"2019-09-13T02:16:08.435Z","updated":"2019-09-13T02:40:39.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6j9000bnovdgtzaum8z","content":"<h1 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h1><ul>\n<li>角色：<ul>\n<li>Target: 目标角色，期待得到的接口</li>\n<li>Adaptee:适配者角色，被适配的接口</li>\n<li>Adapter:适配器角色，将原接口转换成目标接口</li>\n</ul>\n</li>\n<li>适用场景：当调用双方都不太容易修改的时候，为了服用现有组件可以使用适配器模式；在系统中介入第三方组件的时候经常被用到</li>\n<li>代理模式和适配器模式的区别：</li>\n<li>代理模式和装饰器模式的区别：</li>\n</ul>\n<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><ul>\n<li>目的：</li>\n</ul>\n<ol>\n<li>通过引入代理对象的方式来间接访问目标对象，防止直接访问目标对象给系统带来的不必要复杂性</li>\n<li>通过代理对象对原有的业务增强</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h1><ul>\n<li>角色：<ul>\n<li>Target: 目标角色，期待得到的接口</li>\n<li>Adaptee:适配者角色，被适配的接口</li>\n<li>Adapter:适配器角色，将原接口转换成目标接口</li>\n</ul>\n</li>\n<li>适用场景：当调用双方都不太容易修改的时候，为了服用现有组件可以使用适配器模式；在系统中介入第三方组件的时候经常被用到</li>\n<li>代理模式和适配器模式的区别：</li>\n<li>代理模式和装饰器模式的区别：</li>\n</ul>\n<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><ul>\n<li>目的：</li>\n</ul>\n<ol>\n<li>通过引入代理对象的方式来间接访问目标对象，防止直接访问目标对象给系统带来的不必要复杂性</li>\n<li>通过代理对象对原有的业务增强</li>\n</ol>\n"},{"title":"redis的数据类型","_content":"\n# hash\n## 特点\n\n## 重要API\n* hget,时间复杂度O(1)\n\t* hget key field ：获取hash key对应的field的value\n\n* hset,时间复杂度O(1)\n\t* hset key field value  ：设置hash key对应的field的value\n\n* hdel,时间复杂度O(1)\n\t* hdel key field ：删除hash key对应的field的value\n\t\n\t","source":"_posts/redis/数据类型.md","raw":"---\ntitle: redis的数据类型\ntags: \n- redis\ncategories:\n- redis\n---\n\n# hash\n## 特点\n\n## 重要API\n* hget,时间复杂度O(1)\n\t* hget key field ：获取hash key对应的field的value\n\n* hset,时间复杂度O(1)\n\t* hset key field value  ：设置hash key对应的field的value\n\n* hdel,时间复杂度O(1)\n\t* hdel key field ：删除hash key对应的field的value\n\t\n\t","slug":"redis/数据类型","published":1,"date":"2019-09-12T13:26:46.286Z","updated":"2019-09-13T01:41:17.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6jr000fnovdf3fyzn0k","content":"<h1 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h1><h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><h2 id=\"重要API\"><a href=\"#重要API\" class=\"headerlink\" title=\"重要API\"></a>重要API</h2><ul>\n<li><p>hget,时间复杂度O(1)</p>\n<ul>\n<li>hget key field ：获取hash key对应的field的value</li>\n</ul>\n</li>\n<li><p>hset,时间复杂度O(1)</p>\n<ul>\n<li>hset key field value  ：设置hash key对应的field的value</li>\n</ul>\n</li>\n<li><p>hdel,时间复杂度O(1)</p>\n<ul>\n<li>hdel key field ：删除hash key对应的field的value</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h1><h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><h2 id=\"重要API\"><a href=\"#重要API\" class=\"headerlink\" title=\"重要API\"></a>重要API</h2><ul>\n<li><p>hget,时间复杂度O(1)</p>\n<ul>\n<li>hget key field ：获取hash key对应的field的value</li>\n</ul>\n</li>\n<li><p>hset,时间复杂度O(1)</p>\n<ul>\n<li>hset key field value  ：设置hash key对应的field的value</li>\n</ul>\n</li>\n<li><p>hdel,时间复杂度O(1)</p>\n<ul>\n<li>hdel key field ：删除hash key对应的field的value</li>\n</ul>\n</li>\n</ul>\n"},{"title":"异常","_content":"\n\n# try-catch性能消耗的地方\n* try-catch块影响JVM优化\n* 异常对象实例需要保存栈快照等信息，开销较大","source":"_posts/javabase/异常.md","raw":"---\ntitle: 异常\ntags: \n- 异常\ncategories:\n- java基础\n---\n\n\n# try-catch性能消耗的地方\n* try-catch块影响JVM优化\n* 异常对象实例需要保存栈快照等信息，开销较大","slug":"javabase/异常","published":1,"date":"2019-10-11T12:32:22.550Z","updated":"2019-10-11T12:34:15.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6jv000hnovdxvt1ismp","content":"<h1 id=\"try-catch性能消耗的地方\"><a href=\"#try-catch性能消耗的地方\" class=\"headerlink\" title=\"try-catch性能消耗的地方\"></a>try-catch性能消耗的地方</h1><ul>\n<li>try-catch块影响JVM优化</li>\n<li>异常对象实例需要保存栈快照等信息，开销较大</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"try-catch性能消耗的地方\"><a href=\"#try-catch性能消耗的地方\" class=\"headerlink\" title=\"try-catch性能消耗的地方\"></a>try-catch性能消耗的地方</h1><ul>\n<li>try-catch块影响JVM优化</li>\n<li>异常对象实例需要保存栈快照等信息，开销较大</li>\n</ul>\n"},{"title":"阻塞队列","_content":"\n# 特点\n* 当阻塞队列是空时，从队列中获取元素的操作将会被阻塞；\n* 当阻塞队列是满时，往队列里添加元素的操作将会被阻塞；\n\n# 为什么需要阻塞队列？\n> 好处是我不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了\n\n# 架构介绍\n* BlockingQueue\n\t* LinkedTransferQueue：由链表结构组成的无界阻塞队列\n\t* LinkedBlockingDeque:由链表结构组成的有界阻塞队列（默认大小是Integer.MAX_VALUE）\n\t* PriorityBlockingQueue:支持优先级排序的无界阻塞队列\n\t* SynchronousQueue：不存储元素的阻塞队列，即单个元素的队列\n\t* DelayQueue：使用优先级队列实现的延迟无界阻塞队列\n\t* ArrayBlockingQueue:由数组结构组成的有界阻塞队列\n\t* LinkedBlockingQueue：由链表结构组成的双向阻塞队列\n\t\n\t\n# 核心方法\n","source":"_posts/multiThread/阻塞队列.md","raw":"---\ntitle: 阻塞队列\ntags: \n- 阻塞队列\ncategories:\n- 并发编程\n---\n\n# 特点\n* 当阻塞队列是空时，从队列中获取元素的操作将会被阻塞；\n* 当阻塞队列是满时，往队列里添加元素的操作将会被阻塞；\n\n# 为什么需要阻塞队列？\n> 好处是我不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了\n\n# 架构介绍\n* BlockingQueue\n\t* LinkedTransferQueue：由链表结构组成的无界阻塞队列\n\t* LinkedBlockingDeque:由链表结构组成的有界阻塞队列（默认大小是Integer.MAX_VALUE）\n\t* PriorityBlockingQueue:支持优先级排序的无界阻塞队列\n\t* SynchronousQueue：不存储元素的阻塞队列，即单个元素的队列\n\t* DelayQueue：使用优先级队列实现的延迟无界阻塞队列\n\t* ArrayBlockingQueue:由数组结构组成的有界阻塞队列\n\t* LinkedBlockingQueue：由链表结构组成的双向阻塞队列\n\t\n\t\n# 核心方法\n","slug":"multiThread/阻塞队列","published":1,"date":"2019-09-17T13:16:44.268Z","updated":"2019-09-18T13:35:25.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6mb0018novd5sa5v1cu","content":"<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><ul>\n<li>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞；</li>\n<li>当阻塞队列是满时，往队列里添加元素的操作将会被阻塞；</li>\n</ul>\n<h1 id=\"为什么需要阻塞队列？\"><a href=\"#为什么需要阻塞队列？\" class=\"headerlink\" title=\"为什么需要阻塞队列？\"></a>为什么需要阻塞队列？</h1><blockquote>\n<p>好处是我不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了</p>\n</blockquote>\n<h1 id=\"架构介绍\"><a href=\"#架构介绍\" class=\"headerlink\" title=\"架构介绍\"></a>架构介绍</h1><ul>\n<li>BlockingQueue<ul>\n<li>LinkedTransferQueue：由链表结构组成的无界阻塞队列</li>\n<li>LinkedBlockingDeque:由链表结构组成的有界阻塞队列（默认大小是Integer.MAX_VALUE）</li>\n<li>PriorityBlockingQueue:支持优先级排序的无界阻塞队列</li>\n<li>SynchronousQueue：不存储元素的阻塞队列，即单个元素的队列</li>\n<li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列</li>\n<li>ArrayBlockingQueue:由数组结构组成的有界阻塞队列</li>\n<li>LinkedBlockingQueue：由链表结构组成的双向阻塞队列</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><ul>\n<li>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞；</li>\n<li>当阻塞队列是满时，往队列里添加元素的操作将会被阻塞；</li>\n</ul>\n<h1 id=\"为什么需要阻塞队列？\"><a href=\"#为什么需要阻塞队列？\" class=\"headerlink\" title=\"为什么需要阻塞队列？\"></a>为什么需要阻塞队列？</h1><blockquote>\n<p>好处是我不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了</p>\n</blockquote>\n<h1 id=\"架构介绍\"><a href=\"#架构介绍\" class=\"headerlink\" title=\"架构介绍\"></a>架构介绍</h1><ul>\n<li>BlockingQueue<ul>\n<li>LinkedTransferQueue：由链表结构组成的无界阻塞队列</li>\n<li>LinkedBlockingDeque:由链表结构组成的有界阻塞队列（默认大小是Integer.MAX_VALUE）</li>\n<li>PriorityBlockingQueue:支持优先级排序的无界阻塞队列</li>\n<li>SynchronousQueue：不存储元素的阻塞队列，即单个元素的队列</li>\n<li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列</li>\n<li>ArrayBlockingQueue:由数组结构组成的有界阻塞队列</li>\n<li>LinkedBlockingQueue：由链表结构组成的双向阻塞队列</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h1>"},{"title":"spring组件","_content":"\nBeanFactoryPostProcessor：beanFactory的后置处理器\nBeanDefinitionRegistryPostProcessor:bean定义后置处理器","source":"_posts/spring/Spring组件.md","raw":"---\ntitle: spring组件\ntags: \n- spring\ncategories:\n- spring\n---\n\nBeanFactoryPostProcessor：beanFactory的后置处理器\nBeanDefinitionRegistryPostProcessor:bean定义后置处理器","slug":"spring/Spring组件","published":1,"date":"2019-09-12T13:26:46.299Z","updated":"2019-09-13T01:37:29.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6me0019novdo5asov59","content":"<p>BeanFactoryPostProcessor：beanFactory的后置处理器<br>BeanDefinitionRegistryPostProcessor:bean定义后置处理器</p>\n","site":{"data":{}},"excerpt":"","more":"<p>BeanFactoryPostProcessor：beanFactory的后置处理器<br>BeanDefinitionRegistryPostProcessor:bean定义后置处理器</p>\n"},{"title":"spring中的设计模式","_content":"\nAOP调用:责任链模式","source":"_posts/spring/spring中的设计模式.md","raw":"---\ntitle: spring中的设计模式\ntags: \n- spring\n- 设计模式\ncategories:\n- spring\n---\n\nAOP调用:责任链模式","slug":"spring/spring中的设计模式","published":1,"date":"2019-09-12T13:26:46.296Z","updated":"2019-09-14T23:33:23.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6mp001bnovdm5m9cz9z","content":"<p>AOP调用:责任链模式</p>\n","site":{"data":{}},"excerpt":"","more":"<p>AOP调用:责任链模式</p>\n"},{"title":"spring事务","_content":"\n# 接口\n\t* PlatformTransactionManager\n\t* TransactionDefinition\n\t* TransactionStatus\n# ACID:\n\t* 原子性\n\t* 一致性\n\t* 隔离性\n\t* 持久行\n# 传播行为\n\t* Progation_Required\n\t* Progation_Suppport\n\t* Progation_manatory\n\t* Progation_Required_new\n\t* Progation_not_support\n\t* Progation_never\n\t* Progation_nested :spring特有的\n\t\t* 连接点\n# 隔离级别\n\t* Isolation_NOT_COMMITED\n\t* ISolation_COMMITED\n\t* Isolation_Repeatable_read\n\t* Isolation_Serilizable\n# 并发访问问题：\n\t* 脏读：读到其他事务还没提交的数据，数据被回滚后，引起的问题\n\t* 不可重复读：两次都读取结果不一致，读到的数据被其他事务修改后，再去读取，会不一样\n\t* 幻读：也是两次读取结果不一致，读取到的数据后，其他数据有插入或者删除，再去读取，会不一样\n# 原理：Spring AOP","source":"_posts/spring/transaction.md","raw":"---\ntitle: spring事务\ntags: \n- spring\ncategories:\n- spring\n---\n\n# 接口\n\t* PlatformTransactionManager\n\t* TransactionDefinition\n\t* TransactionStatus\n# ACID:\n\t* 原子性\n\t* 一致性\n\t* 隔离性\n\t* 持久行\n# 传播行为\n\t* Progation_Required\n\t* Progation_Suppport\n\t* Progation_manatory\n\t* Progation_Required_new\n\t* Progation_not_support\n\t* Progation_never\n\t* Progation_nested :spring特有的\n\t\t* 连接点\n# 隔离级别\n\t* Isolation_NOT_COMMITED\n\t* ISolation_COMMITED\n\t* Isolation_Repeatable_read\n\t* Isolation_Serilizable\n# 并发访问问题：\n\t* 脏读：读到其他事务还没提交的数据，数据被回滚后，引起的问题\n\t* 不可重复读：两次都读取结果不一致，读到的数据被其他事务修改后，再去读取，会不一样\n\t* 幻读：也是两次读取结果不一致，读取到的数据后，其他数据有插入或者删除，再去读取，会不一样\n# 原理：Spring AOP","slug":"spring/transaction","published":1,"date":"2019-09-12T13:26:46.303Z","updated":"2019-09-13T01:37:51.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6mu001dnovdqyhejnz2","content":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><pre><code>* PlatformTransactionManager\n* TransactionDefinition\n* TransactionStatus</code></pre><h1 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID:\"></a>ACID:</h1><pre><code>* 原子性\n* 一致性\n* 隔离性\n* 持久行</code></pre><h1 id=\"传播行为\"><a href=\"#传播行为\" class=\"headerlink\" title=\"传播行为\"></a>传播行为</h1><pre><code>* Progation_Required\n* Progation_Suppport\n* Progation_manatory\n* Progation_Required_new\n* Progation_not_support\n* Progation_never\n* Progation_nested :spring特有的\n    * 连接点</code></pre><h1 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h1><pre><code>* Isolation_NOT_COMMITED\n* ISolation_COMMITED\n* Isolation_Repeatable_read\n* Isolation_Serilizable</code></pre><h1 id=\"并发访问问题：\"><a href=\"#并发访问问题：\" class=\"headerlink\" title=\"并发访问问题：\"></a>并发访问问题：</h1><pre><code>* 脏读：读到其他事务还没提交的数据，数据被回滚后，引起的问题\n* 不可重复读：两次都读取结果不一致，读到的数据被其他事务修改后，再去读取，会不一样\n* 幻读：也是两次读取结果不一致，读取到的数据后，其他数据有插入或者删除，再去读取，会不一样</code></pre><h1 id=\"原理：Spring-AOP\"><a href=\"#原理：Spring-AOP\" class=\"headerlink\" title=\"原理：Spring AOP\"></a>原理：Spring AOP</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><pre><code>* PlatformTransactionManager\n* TransactionDefinition\n* TransactionStatus</code></pre><h1 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID:\"></a>ACID:</h1><pre><code>* 原子性\n* 一致性\n* 隔离性\n* 持久行</code></pre><h1 id=\"传播行为\"><a href=\"#传播行为\" class=\"headerlink\" title=\"传播行为\"></a>传播行为</h1><pre><code>* Progation_Required\n* Progation_Suppport\n* Progation_manatory\n* Progation_Required_new\n* Progation_not_support\n* Progation_never\n* Progation_nested :spring特有的\n    * 连接点</code></pre><h1 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h1><pre><code>* Isolation_NOT_COMMITED\n* ISolation_COMMITED\n* Isolation_Repeatable_read\n* Isolation_Serilizable</code></pre><h1 id=\"并发访问问题：\"><a href=\"#并发访问问题：\" class=\"headerlink\" title=\"并发访问问题：\"></a>并发访问问题：</h1><pre><code>* 脏读：读到其他事务还没提交的数据，数据被回滚后，引起的问题\n* 不可重复读：两次都读取结果不一致，读到的数据被其他事务修改后，再去读取，会不一样\n* 幻读：也是两次读取结果不一致，读取到的数据后，其他数据有插入或者删除，再去读取，会不一样</code></pre><h1 id=\"原理：Spring-AOP\"><a href=\"#原理：Spring-AOP\" class=\"headerlink\" title=\"原理：Spring AOP\"></a>原理：Spring AOP</h1>"},{"title":"AOP底层源码","_content":"\n\n# AOP调用过程：\n* 配置类上加@EnableAspectJAutoProxy注解\n* @EnableAspectJAutoProxy注解使用了@Import(AspectJAutoProxyRegistrar.class)\n* AspectJAutoProxyRegistrar类调用registerBeanDefinitions方法\n* registerBeanDefinitions方法中调用AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry) \n* registerAspectJAnnotationAutoProxyCreatorIfNecessary中向容器注册名为key为**org.springframework.aop.config.internalAutoProxyCreator**，value是**AnnotationAwareAspectJAutoProxyCreator*，这个类是BeanPostProcessor的子类\n* AnnotationAwareAspectJAutoProxyCreator：贯穿了AOP,继承关系如下：\n* AnnotationAwareAspectJAutoProxyCreator\n\t* AspectJAwareAdvisorAutoProxyCreator\n\t\t* AbstractAdvisorAutoProxyCreator\n\t\t\t* AbstractAutoProxyCreator  extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware\n\t\t\t* 关注后置处理器，自动装配BeanFactory\n* SmartInstantiationAwareBeanPostProcessor:bean的后置处理器\n* BeanFactoryAware：能把beanFactory传进来\n\n***\n# IOC创建internalAutoProxyCreator的bean，调用过程：\n* refresh()\n\t* registerBeanPostProcessors(beanFactory);\n\t\t* PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);\n\t\t\t* AnnotationAwareAspectJAutoProxyCreator实现了Ordered接口，执行对应逻辑\n\t\t\t\t*  进入beanFactory.getBean(ppName, BeanPostProcessor.class);\n\t\t\t\t\t*  doGetBean(name, requiredType, null, false);\n\t\t\t\t\t\t* createBean\n\t\t\t\t\t\t\t* Object bean = resolveBeforeInstantiation(beanName, mbdToUse);  返回代理对象，会有前置通知后置通知\n\t\t\t\t\t\t\t\t* bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);\n\t\t\t\t\t\t\t\t\t* \tObject result = ibp.postProcessBeforeInstantiation(beanClass, beanName); \n\t\t\t\t\t\t\t\t\t\t* Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource); 产生代理对象\n\t\t\t\t\t\t\t\t\t\t\t*  proxyFactory.getProxy(getProxyClassLoader()); \n\t\t\t\t\t\t\t\t\t\t\t\t* return createAopProxy().getProxy(classLoader);   `proxyFactory有cglib和jdk两种实现`\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t* Object beanInstance = doCreateBean(beanName, mbdToUse, args);\n\t\t\t\t\t\t\t\t\t* \tinstanceWrapper = createBeanInstance(beanName, mbd, args);\n\n***\n# AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法\n* refresh()\n\t* finishBeanFactoryInitialization(beanFactory);\n\t\t* beanFactory.preInstantiateSingletons();\n\t\t\t* \tgetBean(beanName);\n\t\t\t\t* doGetBean\n\t\t\t\t\t* createBean\n\t\t\t\t\t\t* Object bean = resolveBeforeInstantiation(beanName, mbdToUse); ：返回被代理类\n\t\t\t\t\t\t\t* applyBeanPostProcessorsAfterInitialization  ：后置处理器，对bean进行增强\n\t\t\t\t\t\t\t\t* beanProcessor.postProcessAfterInitialization(result, beanName);\n\t\t\t\t\t\t\t\t\t* wrapIfNecessary\n\t\t\t\t\t\t\t\t\t\t* getAdvicesAndAdvisorsForBean 获取通知\n\t\t\t\t\t\t\t\t\t\t* createProxy：代理工厂创建代理类\n***\n# AOP调用过程：\n1. 获取拦截链\n2. 链式调用通知方法\n* CglibAopProxy.DynamicAdvisedInterceptor内部类的intercept\n\t* getInterceptorsAndDynamicInterceptionAdvice\n\t\t*  this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(\n\t\t\t\t\tthis, method, targetClass);\n* retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n\n\n# AOP过程猜想：\n* 1.拦截方法\n* 2.调用IOC的createBean()方法\n* 3.","source":"_posts/spring/AOP底层源码.md","raw":"---\ntitle: AOP底层源码\ntags: \n- AOP\ncategories:\n- spring\n---\n\n\n# AOP调用过程：\n* 配置类上加@EnableAspectJAutoProxy注解\n* @EnableAspectJAutoProxy注解使用了@Import(AspectJAutoProxyRegistrar.class)\n* AspectJAutoProxyRegistrar类调用registerBeanDefinitions方法\n* registerBeanDefinitions方法中调用AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry) \n* registerAspectJAnnotationAutoProxyCreatorIfNecessary中向容器注册名为key为**org.springframework.aop.config.internalAutoProxyCreator**，value是**AnnotationAwareAspectJAutoProxyCreator*，这个类是BeanPostProcessor的子类\n* AnnotationAwareAspectJAutoProxyCreator：贯穿了AOP,继承关系如下：\n* AnnotationAwareAspectJAutoProxyCreator\n\t* AspectJAwareAdvisorAutoProxyCreator\n\t\t* AbstractAdvisorAutoProxyCreator\n\t\t\t* AbstractAutoProxyCreator  extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware\n\t\t\t* 关注后置处理器，自动装配BeanFactory\n* SmartInstantiationAwareBeanPostProcessor:bean的后置处理器\n* BeanFactoryAware：能把beanFactory传进来\n\n***\n# IOC创建internalAutoProxyCreator的bean，调用过程：\n* refresh()\n\t* registerBeanPostProcessors(beanFactory);\n\t\t* PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);\n\t\t\t* AnnotationAwareAspectJAutoProxyCreator实现了Ordered接口，执行对应逻辑\n\t\t\t\t*  进入beanFactory.getBean(ppName, BeanPostProcessor.class);\n\t\t\t\t\t*  doGetBean(name, requiredType, null, false);\n\t\t\t\t\t\t* createBean\n\t\t\t\t\t\t\t* Object bean = resolveBeforeInstantiation(beanName, mbdToUse);  返回代理对象，会有前置通知后置通知\n\t\t\t\t\t\t\t\t* bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);\n\t\t\t\t\t\t\t\t\t* \tObject result = ibp.postProcessBeforeInstantiation(beanClass, beanName); \n\t\t\t\t\t\t\t\t\t\t* Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource); 产生代理对象\n\t\t\t\t\t\t\t\t\t\t\t*  proxyFactory.getProxy(getProxyClassLoader()); \n\t\t\t\t\t\t\t\t\t\t\t\t* return createAopProxy().getProxy(classLoader);   `proxyFactory有cglib和jdk两种实现`\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t* Object beanInstance = doCreateBean(beanName, mbdToUse, args);\n\t\t\t\t\t\t\t\t\t* \tinstanceWrapper = createBeanInstance(beanName, mbd, args);\n\n***\n# AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法\n* refresh()\n\t* finishBeanFactoryInitialization(beanFactory);\n\t\t* beanFactory.preInstantiateSingletons();\n\t\t\t* \tgetBean(beanName);\n\t\t\t\t* doGetBean\n\t\t\t\t\t* createBean\n\t\t\t\t\t\t* Object bean = resolveBeforeInstantiation(beanName, mbdToUse); ：返回被代理类\n\t\t\t\t\t\t\t* applyBeanPostProcessorsAfterInitialization  ：后置处理器，对bean进行增强\n\t\t\t\t\t\t\t\t* beanProcessor.postProcessAfterInitialization(result, beanName);\n\t\t\t\t\t\t\t\t\t* wrapIfNecessary\n\t\t\t\t\t\t\t\t\t\t* getAdvicesAndAdvisorsForBean 获取通知\n\t\t\t\t\t\t\t\t\t\t* createProxy：代理工厂创建代理类\n***\n# AOP调用过程：\n1. 获取拦截链\n2. 链式调用通知方法\n* CglibAopProxy.DynamicAdvisedInterceptor内部类的intercept\n\t* getInterceptorsAndDynamicInterceptionAdvice\n\t\t*  this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(\n\t\t\t\t\tthis, method, targetClass);\n* retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n\n\n# AOP过程猜想：\n* 1.拦截方法\n* 2.调用IOC的createBean()方法\n* 3.","slug":"spring/AOP底层源码","published":1,"date":"2019-09-12T13:26:46.293Z","updated":"2019-09-14T23:33:40.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6n0001fnovd9r23gqfh","content":"<h1 id=\"AOP调用过程：\"><a href=\"#AOP调用过程：\" class=\"headerlink\" title=\"AOP调用过程：\"></a>AOP调用过程：</h1><ul>\n<li>配置类上加@EnableAspectJAutoProxy注解</li>\n<li>@EnableAspectJAutoProxy注解使用了@Import(AspectJAutoProxyRegistrar.class)</li>\n<li>AspectJAutoProxyRegistrar类调用registerBeanDefinitions方法</li>\n<li>registerBeanDefinitions方法中调用AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry) </li>\n<li>registerAspectJAnnotationAutoProxyCreatorIfNecessary中向容器注册名为key为<strong>org.springframework.aop.config.internalAutoProxyCreator</strong>，value是*<em>AnnotationAwareAspectJAutoProxyCreator</em>，这个类是BeanPostProcessor的子类</li>\n<li>AnnotationAwareAspectJAutoProxyCreator：贯穿了AOP,继承关系如下：</li>\n<li>AnnotationAwareAspectJAutoProxyCreator<ul>\n<li>AspectJAwareAdvisorAutoProxyCreator<ul>\n<li>AbstractAdvisorAutoProxyCreator<ul>\n<li>AbstractAutoProxyCreator  extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware</li>\n<li>关注后置处理器，自动装配BeanFactory</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SmartInstantiationAwareBeanPostProcessor:bean的后置处理器</li>\n<li>BeanFactoryAware：能把beanFactory传进来</li>\n</ul>\n<hr>\n<h1 id=\"IOC创建internalAutoProxyCreator的bean，调用过程：\"><a href=\"#IOC创建internalAutoProxyCreator的bean，调用过程：\" class=\"headerlink\" title=\"IOC创建internalAutoProxyCreator的bean，调用过程：\"></a>IOC创建internalAutoProxyCreator的bean，调用过程：</h1><ul>\n<li><p>refresh()</p>\n<ul>\n<li><p>registerBeanPostProcessors(beanFactory);</p>\n<ul>\n<li><p>PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);</p>\n<ul>\n<li><p>AnnotationAwareAspectJAutoProxyCreator实现了Ordered接口，执行对应逻辑</p>\n<ul>\n<li><p>进入beanFactory.getBean(ppName, BeanPostProcessor.class);</p>\n<ul>\n<li><p>doGetBean(name, requiredType, null, false);</p>\n<ul>\n<li><p>createBean</p>\n<ul>\n<li><p>Object bean = resolveBeforeInstantiation(beanName, mbdToUse);  返回代理对象，会有前置通知后置通知</p>\n<ul>\n<li><p>bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</p>\n<ul>\n<li>Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName); <ul>\n<li>Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource); 产生代理对象<ul>\n<li>proxyFactory.getProxy(getProxyClassLoader()); <ul>\n<li>return createAopProxy().getProxy(classLoader);   <code>proxyFactory有cglib和jdk两种实现</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Object beanInstance = doCreateBean(beanName, mbdToUse, args);</p>\n<ul>\n<li>instanceWrapper = createBeanInstance(beanName, mbd, args);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法\"><a href=\"#AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法\" class=\"headerlink\" title=\"AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法\"></a>AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法</h1><ul>\n<li>refresh()<ul>\n<li>finishBeanFactoryInitialization(beanFactory);<ul>\n<li>beanFactory.preInstantiateSingletons();<ul>\n<li>getBean(beanName);<ul>\n<li>doGetBean<ul>\n<li>createBean<ul>\n<li>Object bean = resolveBeforeInstantiation(beanName, mbdToUse); ：返回被代理类<ul>\n<li>applyBeanPostProcessorsAfterInitialization  ：后置处理器，对bean进行增强<ul>\n<li>beanProcessor.postProcessAfterInitialization(result, beanName);<ul>\n<li>wrapIfNecessary<ul>\n<li>getAdvicesAndAdvisorsForBean 获取通知</li>\n<li>createProxy：代理工厂创建代理类</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"AOP调用过程：-1\"><a href=\"#AOP调用过程：-1\" class=\"headerlink\" title=\"AOP调用过程：\"></a>AOP调用过程：</h1><ol>\n<li>获取拦截链</li>\n<li>链式调用通知方法</li>\n</ol>\n<ul>\n<li>CglibAopProxy.DynamicAdvisedInterceptor内部类的intercept<ul>\n<li>getInterceptorsAndDynamicInterceptionAdvice<ul>\n<li>this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(<pre><code>this, method, targetClass);</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</li>\n</ul>\n<h1 id=\"AOP过程猜想：\"><a href=\"#AOP过程猜想：\" class=\"headerlink\" title=\"AOP过程猜想：\"></a>AOP过程猜想：</h1><ul>\n<li>1.拦截方法</li>\n<li>2.调用IOC的createBean()方法</li>\n<li>3.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"AOP调用过程：\"><a href=\"#AOP调用过程：\" class=\"headerlink\" title=\"AOP调用过程：\"></a>AOP调用过程：</h1><ul>\n<li>配置类上加@EnableAspectJAutoProxy注解</li>\n<li>@EnableAspectJAutoProxy注解使用了@Import(AspectJAutoProxyRegistrar.class)</li>\n<li>AspectJAutoProxyRegistrar类调用registerBeanDefinitions方法</li>\n<li>registerBeanDefinitions方法中调用AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry) </li>\n<li>registerAspectJAnnotationAutoProxyCreatorIfNecessary中向容器注册名为key为<strong>org.springframework.aop.config.internalAutoProxyCreator</strong>，value是*<em>AnnotationAwareAspectJAutoProxyCreator</em>，这个类是BeanPostProcessor的子类</li>\n<li>AnnotationAwareAspectJAutoProxyCreator：贯穿了AOP,继承关系如下：</li>\n<li>AnnotationAwareAspectJAutoProxyCreator<ul>\n<li>AspectJAwareAdvisorAutoProxyCreator<ul>\n<li>AbstractAdvisorAutoProxyCreator<ul>\n<li>AbstractAutoProxyCreator  extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware</li>\n<li>关注后置处理器，自动装配BeanFactory</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SmartInstantiationAwareBeanPostProcessor:bean的后置处理器</li>\n<li>BeanFactoryAware：能把beanFactory传进来</li>\n</ul>\n<hr>\n<h1 id=\"IOC创建internalAutoProxyCreator的bean，调用过程：\"><a href=\"#IOC创建internalAutoProxyCreator的bean，调用过程：\" class=\"headerlink\" title=\"IOC创建internalAutoProxyCreator的bean，调用过程：\"></a>IOC创建internalAutoProxyCreator的bean，调用过程：</h1><ul>\n<li><p>refresh()</p>\n<ul>\n<li><p>registerBeanPostProcessors(beanFactory);</p>\n<ul>\n<li><p>PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);</p>\n<ul>\n<li><p>AnnotationAwareAspectJAutoProxyCreator实现了Ordered接口，执行对应逻辑</p>\n<ul>\n<li><p>进入beanFactory.getBean(ppName, BeanPostProcessor.class);</p>\n<ul>\n<li><p>doGetBean(name, requiredType, null, false);</p>\n<ul>\n<li><p>createBean</p>\n<ul>\n<li><p>Object bean = resolveBeforeInstantiation(beanName, mbdToUse);  返回代理对象，会有前置通知后置通知</p>\n<ul>\n<li><p>bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</p>\n<ul>\n<li>Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName); <ul>\n<li>Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource); 产生代理对象<ul>\n<li>proxyFactory.getProxy(getProxyClassLoader()); <ul>\n<li>return createAopProxy().getProxy(classLoader);   <code>proxyFactory有cglib和jdk两种实现</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Object beanInstance = doCreateBean(beanName, mbdToUse, args);</p>\n<ul>\n<li>instanceWrapper = createBeanInstance(beanName, mbd, args);</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法\"><a href=\"#AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法\" class=\"headerlink\" title=\"AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法\"></a>AnnotationAwareAspectJAutoProxyCreator利用后置处理器的方法拦截代理方法</h1><ul>\n<li>refresh()<ul>\n<li>finishBeanFactoryInitialization(beanFactory);<ul>\n<li>beanFactory.preInstantiateSingletons();<ul>\n<li>getBean(beanName);<ul>\n<li>doGetBean<ul>\n<li>createBean<ul>\n<li>Object bean = resolveBeforeInstantiation(beanName, mbdToUse); ：返回被代理类<ul>\n<li>applyBeanPostProcessorsAfterInitialization  ：后置处理器，对bean进行增强<ul>\n<li>beanProcessor.postProcessAfterInitialization(result, beanName);<ul>\n<li>wrapIfNecessary<ul>\n<li>getAdvicesAndAdvisorsForBean 获取通知</li>\n<li>createProxy：代理工厂创建代理类</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"AOP调用过程：-1\"><a href=\"#AOP调用过程：-1\" class=\"headerlink\" title=\"AOP调用过程：\"></a>AOP调用过程：</h1><ol>\n<li>获取拦截链</li>\n<li>链式调用通知方法</li>\n</ol>\n<ul>\n<li>CglibAopProxy.DynamicAdvisedInterceptor内部类的intercept<ul>\n<li>getInterceptorsAndDynamicInterceptionAdvice<ul>\n<li>this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(<pre><code>this, method, targetClass);</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</li>\n</ul>\n<h1 id=\"AOP过程猜想：\"><a href=\"#AOP过程猜想：\" class=\"headerlink\" title=\"AOP过程猜想：\"></a>AOP过程猜想：</h1><ul>\n<li>1.拦截方法</li>\n<li>2.调用IOC的createBean()方法</li>\n<li>3.</li>\n</ul>\n"},{"title":"策略模式","_content":"\n# 策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化\n\n# 使用场景\n* 针对同一类型的多种处理方式，仅仅是具体行为有差别时；\n* 出现同一抽象有多个子类，而又需要使用if-else或者switch-case来选择具体子类时\n\n# 组件\n* Context：算法调用者，使用setCategory方法灵活的选择策略\n* Strategy：算法的同一接口\n* ConcreteStrategy:算法的具体实现\n\n# 源码\n* Spring中","source":"_posts/设计模式/策略模式.md","raw":"---\ntitle: 策略模式\ntags: \n- 设计模式\ncategories:\n- 设计模式\n---\n\n# 策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化\n\n# 使用场景\n* 针对同一类型的多种处理方式，仅仅是具体行为有差别时；\n* 出现同一抽象有多个子类，而又需要使用if-else或者switch-case来选择具体子类时\n\n# 组件\n* Context：算法调用者，使用setCategory方法灵活的选择策略\n* Strategy：算法的同一接口\n* ConcreteStrategy:算法的具体实现\n\n# 源码\n* Spring中","slug":"设计模式/策略模式","published":1,"date":"2019-09-18T14:07:20.352Z","updated":"2019-09-18T14:34:31.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6n5001inovdpykhk02t","content":"<h1 id=\"策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化\"><a href=\"#策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化\" class=\"headerlink\" title=\"策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化\"></a>策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化</h1><h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><ul>\n<li>针对同一类型的多种处理方式，仅仅是具体行为有差别时；</li>\n<li>出现同一抽象有多个子类，而又需要使用if-else或者switch-case来选择具体子类时</li>\n</ul>\n<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><ul>\n<li>Context：算法调用者，使用setCategory方法灵活的选择策略</li>\n<li>Strategy：算法的同一接口</li>\n<li>ConcreteStrategy:算法的具体实现</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><ul>\n<li>Spring中</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化\"><a href=\"#策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化\" class=\"headerlink\" title=\"策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化\"></a>策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化</h1><h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><ul>\n<li>针对同一类型的多种处理方式，仅仅是具体行为有差别时；</li>\n<li>出现同一抽象有多个子类，而又需要使用if-else或者switch-case来选择具体子类时</li>\n</ul>\n<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><ul>\n<li>Context：算法调用者，使用setCategory方法灵活的选择策略</li>\n<li>Strategy：算法的同一接口</li>\n<li>ConcreteStrategy:算法的具体实现</li>\n</ul>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><ul>\n<li>Spring中</li>\n</ul>\n"},{"title":"spring声明式事务底层源码","_content":"\n# 注解\n* 开启事务管理功能，对@Transactional起作用：EnableTransactionManagement\n\n源码和AOP相似\n\n* @EnableTransactionManagement\n\t* @Import(TransactionManagementConfigurationSelector.class)\n\t\t\t* AutoProxyRegistrar.registerBeanDefinitions()\n\t\t\t\t* 注册InfrastructureAdvisorAutoProxyCreator\n\t\t\t* ProxyTransactionManagementConfiguration\n\t\t\t\t* transactionAttributeSource()\n\t\t\t\t\t* AnnotationTransactionAttributeSource()\n\t\t\t\t\t\t* SpringTransactionAnnotationParser() ：解析@Transactional的属性\n\t\t\t\t* TransactionInterceptor() : 实现了MethodInterceptor，被AOP拦截\n\t\t\t\t\t* completeTransactionAfterThrowing(txInfo, ex);","source":"_posts/spring/声明式事务底层源码.md","raw":"---\ntitle: spring声明式事务底层源码\ntags: \n- spring\ncategories:\n- spring\n---\n\n# 注解\n* 开启事务管理功能，对@Transactional起作用：EnableTransactionManagement\n\n源码和AOP相似\n\n* @EnableTransactionManagement\n\t* @Import(TransactionManagementConfigurationSelector.class)\n\t\t\t* AutoProxyRegistrar.registerBeanDefinitions()\n\t\t\t\t* 注册InfrastructureAdvisorAutoProxyCreator\n\t\t\t* ProxyTransactionManagementConfiguration\n\t\t\t\t* transactionAttributeSource()\n\t\t\t\t\t* AnnotationTransactionAttributeSource()\n\t\t\t\t\t\t* SpringTransactionAnnotationParser() ：解析@Transactional的属性\n\t\t\t\t* TransactionInterceptor() : 实现了MethodInterceptor，被AOP拦截\n\t\t\t\t\t* completeTransactionAfterThrowing(txInfo, ex);","slug":"spring/声明式事务底层源码","published":1,"date":"2019-09-12T13:26:46.306Z","updated":"2019-09-13T01:38:40.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6nb001knovdefb3e1xj","content":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><ul>\n<li>开启事务管理功能，对@Transactional起作用：EnableTransactionManagement</li>\n</ul>\n<p>源码和AOP相似</p>\n<ul>\n<li>@EnableTransactionManagement<ul>\n<li>@Import(TransactionManagementConfigurationSelector.class)<pre><code>* AutoProxyRegistrar.registerBeanDefinitions()\n    * 注册InfrastructureAdvisorAutoProxyCreator\n* ProxyTransactionManagementConfiguration\n    * transactionAttributeSource()\n        * AnnotationTransactionAttributeSource()\n            * SpringTransactionAnnotationParser() ：解析@Transactional的属性\n    * TransactionInterceptor() : 实现了MethodInterceptor，被AOP拦截\n        * completeTransactionAfterThrowing(txInfo, ex);</code></pre></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><ul>\n<li>开启事务管理功能，对@Transactional起作用：EnableTransactionManagement</li>\n</ul>\n<p>源码和AOP相似</p>\n<ul>\n<li>@EnableTransactionManagement<ul>\n<li>@Import(TransactionManagementConfigurationSelector.class)<pre><code>* AutoProxyRegistrar.registerBeanDefinitions()\n    * 注册InfrastructureAdvisorAutoProxyCreator\n* ProxyTransactionManagementConfiguration\n    * transactionAttributeSource()\n        * AnnotationTransactionAttributeSource()\n            * SpringTransactionAnnotationParser() ：解析@Transactional的属性\n    * TransactionInterceptor() : 实现了MethodInterceptor，被AOP拦截\n        * completeTransactionAfterThrowing(txInfo, ex);</code></pre></li>\n</ul>\n</li>\n</ul>\n"},{"title":"网络基础","date":"2019-09-11T16:00:00.000Z","_content":"\n\n","source":"_posts/网络/网络基础.md","raw":"---\ntitle: 网络基础\ndate: 2019-9-12\ntags: \n- 网络基础\ncategories:\n- 网络\n---\n\n\n","slug":"网络/网络基础","published":1,"updated":"2019-10-11T11:55:53.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6no001mnovdfh717pw7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"代理模式","_content":"\n# 定义： 为其他对象提供一种代理，以控制这个对象的访问\n> 代理对象在客户端和目标对象之间起到中介的作用\n# 类型：结构型\n\n# 适用场景：\n* 保护目标对象\n* 增强目标对象\n\t\n# 优点：\n* 代理模式能将代理对象与真实被调用的目标对象分离\n* 一定程度上降低了系统的耦合度，扩展性好\n* 保护目标对象\n* 增强目标对象\n\n# 缺点：\n* 代理模式会造成系统设计中类的数目增加\n* 在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢\n* 增加系统的复杂度\n\n# 扩展：\n* 静态代理\n* 动态对象\n* CGLib代理： \n\n# 相关设计模式比较\n* 代理模式和装饰者模式\n>  代理模式和装饰者模式实现上比较相似,目的不同，**装饰者模式是为对象加上行为，代理模式是控制访问，代理模式更加注重通过设置代理人的方式增强目标对象，一般是通过增加目标对象的某些行为** \n* 代理模式和适配器模式\n> **适配器模式主要考虑改变对象的接口，代理模式是不能改变被代理对象的接口**","source":"_posts/设计模式/代理模式.md","raw":"---\ntitle: 代理模式\ntags: \n- 设计模式\ncategories:\n- 设计模式\n---\n\n# 定义： 为其他对象提供一种代理，以控制这个对象的访问\n> 代理对象在客户端和目标对象之间起到中介的作用\n# 类型：结构型\n\n# 适用场景：\n* 保护目标对象\n* 增强目标对象\n\t\n# 优点：\n* 代理模式能将代理对象与真实被调用的目标对象分离\n* 一定程度上降低了系统的耦合度，扩展性好\n* 保护目标对象\n* 增强目标对象\n\n# 缺点：\n* 代理模式会造成系统设计中类的数目增加\n* 在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢\n* 增加系统的复杂度\n\n# 扩展：\n* 静态代理\n* 动态对象\n* CGLib代理： \n\n# 相关设计模式比较\n* 代理模式和装饰者模式\n>  代理模式和装饰者模式实现上比较相似,目的不同，**装饰者模式是为对象加上行为，代理模式是控制访问，代理模式更加注重通过设置代理人的方式增强目标对象，一般是通过增加目标对象的某些行为** \n* 代理模式和适配器模式\n> **适配器模式主要考虑改变对象的接口，代理模式是不能改变被代理对象的接口**","slug":"设计模式/代理模式","published":1,"date":"2019-09-14T11:56:37.038Z","updated":"2019-09-14T12:36:49.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6o0001qnovdze2aoh4j","content":"<h1 id=\"定义：-为其他对象提供一种代理，以控制这个对象的访问\"><a href=\"#定义：-为其他对象提供一种代理，以控制这个对象的访问\" class=\"headerlink\" title=\"定义： 为其他对象提供一种代理，以控制这个对象的访问\"></a>定义： 为其他对象提供一种代理，以控制这个对象的访问</h1><blockquote>\n<p>代理对象在客户端和目标对象之间起到中介的作用</p>\n</blockquote>\n<h1 id=\"类型：结构型\"><a href=\"#类型：结构型\" class=\"headerlink\" title=\"类型：结构型\"></a>类型：结构型</h1><h1 id=\"适用场景：\"><a href=\"#适用场景：\" class=\"headerlink\" title=\"适用场景：\"></a>适用场景：</h1><ul>\n<li>保护目标对象</li>\n<li>增强目标对象</li>\n</ul>\n<h1 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h1><ul>\n<li>代理模式能将代理对象与真实被调用的目标对象分离</li>\n<li>一定程度上降低了系统的耦合度，扩展性好</li>\n<li>保护目标对象</li>\n<li>增强目标对象</li>\n</ul>\n<h1 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h1><ul>\n<li>代理模式会造成系统设计中类的数目增加</li>\n<li>在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢</li>\n<li>增加系统的复杂度</li>\n</ul>\n<h1 id=\"扩展：\"><a href=\"#扩展：\" class=\"headerlink\" title=\"扩展：\"></a>扩展：</h1><ul>\n<li>静态代理</li>\n<li>动态对象</li>\n<li>CGLib代理： </li>\n</ul>\n<h1 id=\"相关设计模式比较\"><a href=\"#相关设计模式比较\" class=\"headerlink\" title=\"相关设计模式比较\"></a>相关设计模式比较</h1><ul>\n<li>代理模式和装饰者模式<blockquote>\n<p> 代理模式和装饰者模式实现上比较相似,目的不同，<strong>装饰者模式是为对象加上行为，代理模式是控制访问，代理模式更加注重通过设置代理人的方式增强目标对象，一般是通过增加目标对象的某些行为</strong> </p>\n</blockquote>\n</li>\n<li>代理模式和适配器模式<blockquote>\n<p><strong>适配器模式主要考虑改变对象的接口，代理模式是不能改变被代理对象的接口</strong></p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"定义：-为其他对象提供一种代理，以控制这个对象的访问\"><a href=\"#定义：-为其他对象提供一种代理，以控制这个对象的访问\" class=\"headerlink\" title=\"定义： 为其他对象提供一种代理，以控制这个对象的访问\"></a>定义： 为其他对象提供一种代理，以控制这个对象的访问</h1><blockquote>\n<p>代理对象在客户端和目标对象之间起到中介的作用</p>\n</blockquote>\n<h1 id=\"类型：结构型\"><a href=\"#类型：结构型\" class=\"headerlink\" title=\"类型：结构型\"></a>类型：结构型</h1><h1 id=\"适用场景：\"><a href=\"#适用场景：\" class=\"headerlink\" title=\"适用场景：\"></a>适用场景：</h1><ul>\n<li>保护目标对象</li>\n<li>增强目标对象</li>\n</ul>\n<h1 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h1><ul>\n<li>代理模式能将代理对象与真实被调用的目标对象分离</li>\n<li>一定程度上降低了系统的耦合度，扩展性好</li>\n<li>保护目标对象</li>\n<li>增强目标对象</li>\n</ul>\n<h1 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h1><ul>\n<li>代理模式会造成系统设计中类的数目增加</li>\n<li>在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢</li>\n<li>增加系统的复杂度</li>\n</ul>\n<h1 id=\"扩展：\"><a href=\"#扩展：\" class=\"headerlink\" title=\"扩展：\"></a>扩展：</h1><ul>\n<li>静态代理</li>\n<li>动态对象</li>\n<li>CGLib代理： </li>\n</ul>\n<h1 id=\"相关设计模式比较\"><a href=\"#相关设计模式比较\" class=\"headerlink\" title=\"相关设计模式比较\"></a>相关设计模式比较</h1><ul>\n<li>代理模式和装饰者模式<blockquote>\n<p> 代理模式和装饰者模式实现上比较相似,目的不同，<strong>装饰者模式是为对象加上行为，代理模式是控制访问，代理模式更加注重通过设置代理人的方式增强目标对象，一般是通过增加目标对象的某些行为</strong> </p>\n</blockquote>\n</li>\n<li>代理模式和适配器模式<blockquote>\n<p><strong>适配器模式主要考虑改变对象的接口，代理模式是不能改变被代理对象的接口</strong></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"建造者模式","_content":"\n# 定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\n> 用户只需指定需要建造的类型就可以得到它们，建造过程及细节不需要知道\n\n# 类型：创建型\n\n# 适用场景\n* 如果一个对象有非常复杂的内部结构(很多属性)\n* 想把复杂对象的创建和适用分离\n\n# 优点\n* 封装性好，创建和使用分离\n* 扩展性好，建造类之间独立，一定程度上解耦\n\n# 缺点：\n* 产生多余的Builder对象\n* 产品内部发生变化，建造者都要修改，成本较大\n\n# 相关设计模式\n* 建造者模式和工厂模式\n\t* 建造者模式更注重方法的调用顺序，而工厂模式注重于创建产品\n\t* 创建对象的粒度：建造者模式可以创建一些复杂的产品，由各种复杂的部件组成；工厂模式创建出来都是一个样子\n\t* 关注点：工厂模式只要把对象创建出来就可以，建造者模式还关心创建出来的由哪些部件组成","source":"_posts/设计模式/建造者模式.md","raw":"---\ntitle: 建造者模式\ntags: \n- 设计模式\ncategories:\n- 设计模式\n---\n\n# 定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\n> 用户只需指定需要建造的类型就可以得到它们，建造过程及细节不需要知道\n\n# 类型：创建型\n\n# 适用场景\n* 如果一个对象有非常复杂的内部结构(很多属性)\n* 想把复杂对象的创建和适用分离\n\n# 优点\n* 封装性好，创建和使用分离\n* 扩展性好，建造类之间独立，一定程度上解耦\n\n# 缺点：\n* 产生多余的Builder对象\n* 产品内部发生变化，建造者都要修改，成本较大\n\n# 相关设计模式\n* 建造者模式和工厂模式\n\t* 建造者模式更注重方法的调用顺序，而工厂模式注重于创建产品\n\t* 创建对象的粒度：建造者模式可以创建一些复杂的产品，由各种复杂的部件组成；工厂模式创建出来都是一个样子\n\t* 关注点：工厂模式只要把对象创建出来就可以，建造者模式还关心创建出来的由哪些部件组成","slug":"设计模式/建造者模式","published":1,"date":"2019-09-15T13:05:07.433Z","updated":"2019-09-15T14:08:15.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6oi001unovdu972tpv4","content":"<h1 id=\"定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\"><a href=\"#定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\" class=\"headerlink\" title=\"定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\"></a>定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</h1><blockquote>\n<p>用户只需指定需要建造的类型就可以得到它们，建造过程及细节不需要知道</p>\n</blockquote>\n<h1 id=\"类型：创建型\"><a href=\"#类型：创建型\" class=\"headerlink\" title=\"类型：创建型\"></a>类型：创建型</h1><h1 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h1><ul>\n<li>如果一个对象有非常复杂的内部结构(很多属性)</li>\n<li>想把复杂对象的创建和适用分离</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li>封装性好，创建和使用分离</li>\n<li>扩展性好，建造类之间独立，一定程度上解耦</li>\n</ul>\n<h1 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h1><ul>\n<li>产生多余的Builder对象</li>\n<li>产品内部发生变化，建造者都要修改，成本较大</li>\n</ul>\n<h1 id=\"相关设计模式\"><a href=\"#相关设计模式\" class=\"headerlink\" title=\"相关设计模式\"></a>相关设计模式</h1><ul>\n<li>建造者模式和工厂模式<ul>\n<li>建造者模式更注重方法的调用顺序，而工厂模式注重于创建产品</li>\n<li>创建对象的粒度：建造者模式可以创建一些复杂的产品，由各种复杂的部件组成；工厂模式创建出来都是一个样子</li>\n<li>关注点：工厂模式只要把对象创建出来就可以，建造者模式还关心创建出来的由哪些部件组成</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\"><a href=\"#定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\" class=\"headerlink\" title=\"定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\"></a>定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</h1><blockquote>\n<p>用户只需指定需要建造的类型就可以得到它们，建造过程及细节不需要知道</p>\n</blockquote>\n<h1 id=\"类型：创建型\"><a href=\"#类型：创建型\" class=\"headerlink\" title=\"类型：创建型\"></a>类型：创建型</h1><h1 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h1><ul>\n<li>如果一个对象有非常复杂的内部结构(很多属性)</li>\n<li>想把复杂对象的创建和适用分离</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li>封装性好，创建和使用分离</li>\n<li>扩展性好，建造类之间独立，一定程度上解耦</li>\n</ul>\n<h1 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h1><ul>\n<li>产生多余的Builder对象</li>\n<li>产品内部发生变化，建造者都要修改，成本较大</li>\n</ul>\n<h1 id=\"相关设计模式\"><a href=\"#相关设计模式\" class=\"headerlink\" title=\"相关设计模式\"></a>相关设计模式</h1><ul>\n<li>建造者模式和工厂模式<ul>\n<li>建造者模式更注重方法的调用顺序，而工厂模式注重于创建产品</li>\n<li>创建对象的粒度：建造者模式可以创建一些复杂的产品，由各种复杂的部件组成；工厂模式创建出来都是一个样子</li>\n<li>关注点：工厂模式只要把对象创建出来就可以，建造者模式还关心创建出来的由哪些部件组成</li>\n</ul>\n</li>\n</ul>\n"},{"title":"博客搭建","_content":"\n* [使用hexo+github搭建免费个人博客详细教程](https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html)\n* [github+hexo更该主题](https://blog.csdn.net/heimu24/article/details/81209539)\n* [yelog主题设置](https://yelog.org/2017/03/23/3-hexo-instruction/)\n\n* 命令:\n** hexo d -g","source":"_posts/搭建博客/搭建博客.md","raw":"---\ntitle: 博客搭建\ntags: \n- 博客搭建\ncategories:\n- 博客搭建\n---\n\n* [使用hexo+github搭建免费个人博客详细教程](https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html)\n* [github+hexo更该主题](https://blog.csdn.net/heimu24/article/details/81209539)\n* [yelog主题设置](https://yelog.org/2017/03/23/3-hexo-instruction/)\n\n* 命令:\n** hexo d -g","slug":"搭建博客/搭建博客","published":1,"date":"2019-09-13T02:01:00.644Z","updated":"2019-09-13T02:04:06.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6op001xnovdtqpyj3qh","content":"<ul>\n<li><p><a href=\"https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"noopener\">使用hexo+github搭建免费个人博客详细教程</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/heimu24/article/details/81209539\" target=\"_blank\" rel=\"noopener\">github+hexo更该主题</a></p>\n</li>\n<li><p><a href=\"https://yelog.org/2017/03/23/3-hexo-instruction/\" target=\"_blank\" rel=\"noopener\">yelog主题设置</a></p>\n</li>\n<li><p>命令:</p>\n</li>\n<li><ul>\n<li>hexo d -g</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><a href=\"https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"noopener\">使用hexo+github搭建免费个人博客详细教程</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/heimu24/article/details/81209539\" target=\"_blank\" rel=\"noopener\">github+hexo更该主题</a></p>\n</li>\n<li><p><a href=\"https://yelog.org/2017/03/23/3-hexo-instruction/\" target=\"_blank\" rel=\"noopener\">yelog主题设置</a></p>\n</li>\n<li><p>命令:</p>\n</li>\n<li><ul>\n<li>hexo d -g</li>\n</ul>\n</li>\n</ul>\n"},{"title":"装饰器模式","_content":"\n# 定义\n>装饰器模式允许向一个现有的对象添加新的功能，是一种用于替代继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀\n\n# 优点：\n* 相对于继承，装饰器模式灵活性更强，扩展性更强\n\n# 使用举例\n* IO输入流和输出流:\n```\nBufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(\"c://a.txt\")));\n```\n* Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper,HttpServletRequestWrapper类增强了request对象的功能\n* MyBatis的缓存组件","source":"_posts/设计模式/装饰器模式.md","raw":"---\ntitle: 装饰器模式\ntags: \n- 设计模式\ncategories:\n- 设计模式\n---\n\n# 定义\n>装饰器模式允许向一个现有的对象添加新的功能，是一种用于替代继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀\n\n# 优点：\n* 相对于继承，装饰器模式灵活性更强，扩展性更强\n\n# 使用举例\n* IO输入流和输出流:\n```\nBufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(\"c://a.txt\")));\n```\n* Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper,HttpServletRequestWrapper类增强了request对象的功能\n* MyBatis的缓存组件","slug":"设计模式/装饰器模式","published":1,"date":"2019-09-14T23:38:10.199Z","updated":"2019-09-14T23:50:43.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6oy0021novdux0k6n67","content":"<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><blockquote>\n<p>装饰器模式允许向一个现有的对象添加新的功能，是一种用于替代继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀</p>\n</blockquote>\n<h1 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h1><ul>\n<li>相对于继承，装饰器模式灵活性更强，扩展性更强</li>\n</ul>\n<h1 id=\"使用举例\"><a href=\"#使用举例\" class=\"headerlink\" title=\"使用举例\"></a>使用举例</h1><ul>\n<li><p>IO输入流和输出流:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;c://a.txt&quot;)));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper,HttpServletRequestWrapper类增强了request对象的功能</p>\n</li>\n<li><p>MyBatis的缓存组件</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><blockquote>\n<p>装饰器模式允许向一个现有的对象添加新的功能，是一种用于替代继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀</p>\n</blockquote>\n<h1 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h1><ul>\n<li>相对于继承，装饰器模式灵活性更强，扩展性更强</li>\n</ul>\n<h1 id=\"使用举例\"><a href=\"#使用举例\" class=\"headerlink\" title=\"使用举例\"></a>使用举例</h1><ul>\n<li><p>IO输入流和输出流:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;c://a.txt&quot;)));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper,HttpServletRequestWrapper类增强了request对象的功能</p>\n</li>\n<li><p>MyBatis的缓存组件</p>\n</li>\n</ul>\n"},{"title":"模板模式","_content":"\n# 定义\n> 一个抽象类公开定义了执行它的方法/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式执行。定义一个操作的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定实现。\n\n\n# 源码\n* AQS的tryAcquire,tryRelease, tryAcquireShared, tryReleaseShared\n* Spring中对数据存储，HibernateTemplate,JdbcTemplate,RedisTemplate,MongodbTemplate\n* Mybatis中BaseExecutor","source":"_posts/设计模式/模板模式.md","raw":"---\ntitle: 模板模式\ntags: \n- 设计模式\ncategories:\n- 设计模式\n---\n\n# 定义\n> 一个抽象类公开定义了执行它的方法/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式执行。定义一个操作的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定实现。\n\n\n# 源码\n* AQS的tryAcquire,tryRelease, tryAcquireShared, tryReleaseShared\n* Spring中对数据存储，HibernateTemplate,JdbcTemplate,RedisTemplate,MongodbTemplate\n* Mybatis中BaseExecutor","slug":"设计模式/模板模式","published":1,"date":"2019-09-19T12:57:20.752Z","updated":"2019-09-19T13:03:56.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck24nr6p50025novd7ayabz31","content":"<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><blockquote>\n<p>一个抽象类公开定义了执行它的方法/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式执行。定义一个操作的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定实现。</p>\n</blockquote>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><ul>\n<li>AQS的tryAcquire,tryRelease, tryAcquireShared, tryReleaseShared</li>\n<li>Spring中对数据存储，HibernateTemplate,JdbcTemplate,RedisTemplate,MongodbTemplate</li>\n<li>Mybatis中BaseExecutor</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><blockquote>\n<p>一个抽象类公开定义了执行它的方法/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式执行。定义一个操作的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定实现。</p>\n</blockquote>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><ul>\n<li>AQS的tryAcquire,tryRelease, tryAcquireShared, tryReleaseShared</li>\n<li>Spring中对数据存储，HibernateTemplate,JdbcTemplate,RedisTemplate,MongodbTemplate</li>\n<li>Mybatis中BaseExecutor</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck24nr6ha0000novdmuebsfwo","category_id":"ck24nr6ht0002novdw2wxh7zn","_id":"ck24nr6jc000cnovd0jxedho1"},{"post_id":"ck24nr6hn0001novd14xnioxk","category_id":"ck24nr6iz0007novdkgpiki1k","_id":"ck24nr6k0000inovdqgoorarz"},{"post_id":"ck24nr6ih0004novdxr3eadjh","category_id":"ck24nr6je000dnovdfqmd36me","_id":"ck24nr6ka000nnovdh3ua9h74"},{"post_id":"ck24nr6jv000hnovdxvt1ismp","category_id":"ck24nr6ht0002novdw2wxh7zn","_id":"ck24nr6kr000qnovdhe6k8i63"},{"post_id":"ck24nr6iu0005novdo8sbngtk","category_id":"ck24nr6je000dnovdfqmd36me","_id":"ck24nr6kz000snovd6llhzi3a"},{"post_id":"ck24nr6ix0006novdgmra1i9a","category_id":"ck24nr6je000dnovdfqmd36me","_id":"ck24nr6l6000vnovdb65cg3a6"},{"post_id":"ck24nr6j3000anovdgeru9hw1","category_id":"ck24nr6kx000rnovd0bwqx4gq","_id":"ck24nr6lk0010novdpv6kye1c"},{"post_id":"ck24nr6j9000bnovdgtzaum8z","category_id":"ck24nr6je000dnovdfqmd36me","_id":"ck24nr6lo0013novdjrryp7ts"},{"post_id":"ck24nr6jr000fnovdf3fyzn0k","category_id":"ck24nr6lj000znovdjihp2n07","_id":"ck24nr6ls0016novd1369p04f"},{"post_id":"ck24nr6mb0018novd5sa5v1cu","category_id":"ck24nr6iz0007novdkgpiki1k","_id":"ck24nr6my001enovdmdjjnsb7"},{"post_id":"ck24nr6n0001fnovd9r23gqfh","category_id":"ck24nr6ms001cnovdpnweovnx","_id":"ck24nr6nq001nnovdeq7o0kxb"},{"post_id":"ck24nr6me0019novdo5asov59","category_id":"ck24nr6ms001cnovdpnweovnx","_id":"ck24nr6od001rnovdw3yc8mgq"},{"post_id":"ck24nr6nb001knovdefb3e1xj","category_id":"ck24nr6ms001cnovdpnweovnx","_id":"ck24nr6ok001vnovdlq0a4f5i"},{"post_id":"ck24nr6mp001bnovdm5m9cz9z","category_id":"ck24nr6ms001cnovdpnweovnx","_id":"ck24nr6os001ynovd3dwj99w9"},{"post_id":"ck24nr6mu001dnovdqyhejnz2","category_id":"ck24nr6ms001cnovdpnweovnx","_id":"ck24nr6p00022novdlyjeshjc"},{"post_id":"ck24nr6n5001inovdpykhk02t","category_id":"ck24nr6ol001wnovdayq0ez4p","_id":"ck24nr6q70028novd600zq569"},{"post_id":"ck24nr6oy0021novdux0k6n67","category_id":"ck24nr6ol001wnovdayq0ez4p","_id":"ck24nr6qe002bnovd9qlrvo0r"},{"post_id":"ck24nr6p50025novd7ayabz31","category_id":"ck24nr6ol001wnovdayq0ez4p","_id":"ck24nr6qs002enovdno0uq4l7"},{"post_id":"ck24nr6no001mnovdfh717pw7","category_id":"ck24nr6p10023novdwfygo6cu","_id":"ck24nr6qw002hnovdilfp7ya2"},{"post_id":"ck24nr6o0001qnovdze2aoh4j","category_id":"ck24nr6ol001wnovdayq0ez4p","_id":"ck24nr6r1002lnovdo7cloke4"},{"post_id":"ck24nr6oi001unovdu972tpv4","category_id":"ck24nr6ol001wnovdayq0ez4p","_id":"ck24nr6r9002onovdm7drai5e"},{"post_id":"ck24nr6op001xnovdtqpyj3qh","category_id":"ck24nr6r0002knovdnu6pasup","_id":"ck24nr6rg002rnovddtyxokce"}],"PostTag":[{"post_id":"ck24nr6ha0000novdmuebsfwo","tag_id":"ck24nr6ig0003novd9ysyasqw","_id":"ck24nr6j20009novdm3zewtlo"},{"post_id":"ck24nr6hn0001novd14xnioxk","tag_id":"ck24nr6j00008novdr6unfpbs","_id":"ck24nr6jt000gnovdmq7ji6q2"},{"post_id":"ck24nr6ih0004novdxr3eadjh","tag_id":"ck24nr6jf000enovdr3q6pakr","_id":"ck24nr6k7000lnovdlq9h3ibv"},{"post_id":"ck24nr6iu0005novdo8sbngtk","tag_id":"ck24nr6jf000enovdr3q6pakr","_id":"ck24nr6kd000pnovdopd6mtyt"},{"post_id":"ck24nr6ix0006novdgmra1i9a","tag_id":"ck24nr6jf000enovdr3q6pakr","_id":"ck24nr6l2000unovdp4p4rs7p"},{"post_id":"ck24nr6j3000anovdgeru9hw1","tag_id":"ck24nr6l0000tnovdofpfqpkw","_id":"ck24nr6lg000ynovd3hnv9xm4"},{"post_id":"ck24nr6j9000bnovdgtzaum8z","tag_id":"ck24nr6jf000enovdr3q6pakr","_id":"ck24nr6lm0012novdsi1830ow"},{"post_id":"ck24nr6jr000fnovdf3fyzn0k","tag_id":"ck24nr6lk0011novdu7gwnwwq","_id":"ck24nr6lr0015novd0i4ozq4l"},{"post_id":"ck24nr6jv000hnovdxvt1ismp","tag_id":"ck24nr6lp0014novdikgcb4o6","_id":"ck24nr6lu0017novddljp3qym"},{"post_id":"ck24nr6mb0018novd5sa5v1cu","tag_id":"ck24nr6mj001anovdv6tul8ej","_id":"ck24nr6n4001hnovdrz769t66"},{"post_id":"ck24nr6me0019novdo5asov59","tag_id":"ck24nr6n3001gnovd0gcs13wj","_id":"ck24nr6ns001pnovd083146dv"},{"post_id":"ck24nr6nb001knovdefb3e1xj","tag_id":"ck24nr6n3001gnovd0gcs13wj","_id":"ck24nr6oe001snovdw5hbidoa"},{"post_id":"ck24nr6oi001unovdu972tpv4","tag_id":"ck24nr6og001tnovddx0y6bmf","_id":"ck24nr6ov0020novdgngm0v0f"},{"post_id":"ck24nr6mp001bnovdm5m9cz9z","tag_id":"ck24nr6n3001gnovd0gcs13wj","_id":"ck24nr6p30024novdhmmus43a"},{"post_id":"ck24nr6mp001bnovdm5m9cz9z","tag_id":"ck24nr6og001tnovddx0y6bmf","_id":"ck24nr6pz0027novdqgxi5pd5"},{"post_id":"ck24nr6oy0021novdux0k6n67","tag_id":"ck24nr6og001tnovddx0y6bmf","_id":"ck24nr6qb002anovd9yr6vg67"},{"post_id":"ck24nr6mu001dnovdqyhejnz2","tag_id":"ck24nr6n3001gnovd0gcs13wj","_id":"ck24nr6qg002cnovdw66tlwut"},{"post_id":"ck24nr6p50025novd7ayabz31","tag_id":"ck24nr6og001tnovddx0y6bmf","_id":"ck24nr6qu002gnovd92bzgbx5"},{"post_id":"ck24nr6n0001fnovd9r23gqfh","tag_id":"ck24nr6px0026novd565ip1la","_id":"ck24nr6qx002inovdat84y2lg"},{"post_id":"ck24nr6n5001inovdpykhk02t","tag_id":"ck24nr6og001tnovddx0y6bmf","_id":"ck24nr6r2002mnovdxmh1786d"},{"post_id":"ck24nr6no001mnovdfh717pw7","tag_id":"ck24nr6qy002jnovdohhijp0r","_id":"ck24nr6ra002pnovdvi3wzvfg"},{"post_id":"ck24nr6o0001qnovdze2aoh4j","tag_id":"ck24nr6og001tnovddx0y6bmf","_id":"ck24nr6rg002snovdm07wwrct"},{"post_id":"ck24nr6op001xnovdtqpyj3qh","tag_id":"ck24nr6rd002qnovdxr89gjcp","_id":"ck24nr6rm002tnovd6ixsde67"}],"Tag":[{"name":"java基础","_id":"ck24nr6ig0003novd9ysyasqw"},{"name":"线程","_id":"ck24nr6j00008novdr6unfpbs"},{"name":"mybatis","_id":"ck24nr6jf000enovdr3q6pakr"},{"name":"mysql","_id":"ck24nr6l0000tnovdofpfqpkw"},{"name":"redis","_id":"ck24nr6lk0011novdu7gwnwwq"},{"name":"异常","_id":"ck24nr6lp0014novdikgcb4o6"},{"name":"阻塞队列","_id":"ck24nr6mj001anovdv6tul8ej"},{"name":"spring","_id":"ck24nr6n3001gnovd0gcs13wj"},{"name":"设计模式","_id":"ck24nr6og001tnovddx0y6bmf"},{"name":"AOP","_id":"ck24nr6px0026novd565ip1la"},{"name":"网络基础","_id":"ck24nr6qy002jnovdohhijp0r"},{"name":"博客搭建","_id":"ck24nr6rd002qnovdxr89gjcp"}]}}